/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Lenovo
 */
public class ScanPort extends javax.swing.JFrame {

    /**
     * Creates new form ScanPort
     */
    public ScanPort() {
        initComponents();
    }

//    private final void scan( String ipAddress, String lowPort, String highPort, int timeout ) {
//		int start, end;
//		
//		//verify port numbers
//		try {
//			start = Integer.parseInt( lowPort );
//			end = Integer.parseInt( highPort );
//			
//			if( end <= start ) {
//				this.output.setText("The second port must be higher than the first port");
//				return;
//			}
//		}
//		catch( NumberFormatException nfe ) {
//			this.output.setText("Please enter valid port numbers.");
//			return;
//		}
//		
//		//Scan ports in range
//		for( int current = start; current <= end; current++ ) {
//			try {
//				Socket s = new Socket();
//				s.connect( new InetSocketAddress( ipAddress, current ), timeout ); //attempt a connection
//				s.close();
//				
//				UsedTa.append( "Open port: " + current + System.lineSeparator() );
//			}
//			catch( IOException ioe ) { //connection failed
//				
//					AvlTa.append( "Closed port: " + current + System.lineSeparator() );
//				
//			}
//		}
//	}
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        SearchBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        AvlTa = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        UsedTa = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        SearchBtn.setFont(new java.awt.Font("Calibri", 0, 21)); // NOI18N
        SearchBtn.setForeground(new java.awt.Color(0, 0, 255));
        SearchBtn.setText("Search");
        SearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBtnActionPerformed(evt);
            }
        });

        AvlTa.setColumns(20);
        AvlTa.setRows(5);
        jScrollPane1.setViewportView(AvlTa);

        UsedTa.setColumns(20);
        UsedTa.setRows(5);
        jScrollPane2.setViewportView(UsedTa);

        jLabel4.setText("AVILABLE PORT:");

        jLabel5.setText("USED PORT:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("PORT AVAILABLE SUMMMARY");

        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(172, 172, 172)
                .addComponent(SearchBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBtnActionPerformed
        try {
            //  scan(IpTxt.getText(), StartPt.getText(), EndPt.getText(), 200);
            setData();
        } catch (IOException ex) {
            Logger.getLogger(ScanPort.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SearchBtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScanPort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScanPort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScanPort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScanPort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        //String[] commandList = {"cmd.exe", "/c", "netstat -ano"};
        Process p = Runtime.getRuntime().exec("sudo netstat -antup"); //+ path + "findstr :993 |" + path + "findstr ESTABLISHED |awk {print$2}");
        Scanner sc = new Scanner(p.getInputStream()); 
        BufferedWriter writer = new BufferedWriter(new FileWriter("/home/jens/FirewallLogs/process.txt"));
//        Sample smpl = new Sample();
//        smpl.displayData();
        try 
        {
            while(sc.hasNextLine()) 
            {
                String s = sc.nextLine();
                System.out.println(s);
                writer.write(s);
                writer.newLine();
            }
        } catch (IOException e) {
        } finally {
            try {
                if (writer != null) {
                    writer.close();
                }
            } catch (IOException e) {
            }
        }
        sc.close();
//        BufferedReader iReader = new BufferedReader(
//        new InputStreamReader(process.getInputStream()));
//        String tempStr = "";
//        StringBuffer buffer = new StringBuffer();
//        while ((tempStr = iReader.readLine()) != null) {
//            buffer.append(tempStr + System.lineSeparator());
//        }
//        System.out.println(buffer.toString());
        p.destroy();
//        ScanPort sam = new ScanPort();
//        sam.setData();
        int exitValue = p.exitValue();
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ScanPort sp = new ScanPort();
                sp.setVisible(true);
                sp.setLocation(250, 150);
                sp.setBackground(Color.red);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AvlTa;
    private javax.swing.JButton SearchBtn;
    private javax.swing.JTextArea UsedTa;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

public void setData() throws FileNotFoundException, IOException
    {
        String s;
        String [] s1;
        int count=0;
        int len;
        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream("/home/jens/FirewallLogs/process.txt")));
        while((s = br.readLine()) != null)
        {
            count++;
            if(count > 2)
            {
                String [] str = s.split("\\s+");
                len = str.length;
                for(int i = 0; i < len; i++)
                {
                    System.out.println(i+"-->"+str[i]);
                    
                }
                s1 = str[3].split(":");
                try
                {
                    int a = Integer.parseInt(str[5]);
                    
                    System.out.println("----------------------->>>>>>>>>>>>"+s1[s1.length-1]); 
                    System.out.println("Avalable port.........................");
                    AvlTa.append(s1[s1.length-1]+"\n");
                }
                catch(Exception e)
                {
                    System.out.println("----------------------->>>>>>>>>>>>"+s1[s1.length-1]);
                    System.out.println("Used port.........................");
                    UsedTa.append(s1[s1.length-1]+"\n");
                }
            }
        }
        
    }

}
